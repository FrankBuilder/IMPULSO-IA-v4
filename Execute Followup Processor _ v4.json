{
  "name": "Execute Followup Processor | v4",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "skip",
              "name": "skip_reason",
              "value": "qualified",
              "type": "string"
            },
            {
              "id": "stop",
              "name": "stop_campaign",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "2ff1ffe9-531a-4d08-8ca8-718bc33d35a9",
      "name": "Skip: Qualified",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -832,
        -336
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "skip",
              "name": "skip_reason",
              "value": "disqualified",
              "type": "string"
            },
            {
              "id": "stop",
              "name": "stop_campaign",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "c42230af-c5c8-4acc-8960-3ee03aefd1a9",
      "name": "Skip: Disqualified",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -832,
        -144
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.step_context }}\n\nINFORMAÇÕES DO LEAD:\nNome: {{ $json.contact_name }}\nANUM Score: {{ $json.anum_score }}\nEstágio: {{ $json.qualification_stage }}\n\nHISTÓRICO DE CHAT (últimas mensagens):\n{{ $json.recent_messages }}\n\nFOLLOWUPS ANTERIORES:\n{{ $json.followup_history }}\n\nLead respondeu antes? {{ $json.lead_responded ? 'Sim' : 'Não' }}\n\n---\n\nBaseado no contexto acima, gere UMA mensagem apropriada para este step.\nLembre-se: mensagem curta (2-4 linhas), tom adequado ao step, personalizada.\n\nResponda APENAS com a mensagem, sem aspas ou explicações.",
        "needsFallback": true,
        "options": {
          "systemMessage": "Você é Frank, assistente especializado em geração de mensagens de followup para leads B2B.\n\nSEU OBJETIVO:\nGerar mensagens de reengajamento personalizadas baseadas no histórico de conversa e no estágio atual do followup.\n\nDIRETRIZES OBRIGATÓRIAS:\n1. Mensagens CURTAS (2-4 linhas no máximo)\n2. Tom adequado ao step atual (veja contexto fornecido)\n3. SEMPRE personalizar com base no histórico\n4. Natural, profissional e conversacional\n5. SEM emojis excessivos (máximo 1 por mensagem)\n6. NUNCA mencionar \"followup\" ou \"campanha automática\"\n7. Parecer uma conversa natural continuando\n\nFORMATO DE RESPOSTA:\nResponda APENAS com o texto da mensagem.\nNÃO adicione aspas, explicações ou qualquer texto extra."
        }
      },
      "id": "bd691df8-0520-4e3b-84be-2e523b4ffcbb",
      "name": "AI: Generate Message",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -96,
        80
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/5 * * * *"
            }
          ]
        }
      },
      "id": "0b15c382-7a43-422c-95e9-0bf79edd81c4",
      "name": "Trigger: Every 5 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1952,
        336
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  fe.id as execution_id,\n  fe.campaign_id,\n  fe.contact_id,\n  fe.company_id,\n  fe.step,\n  fe.total_steps,\n  fe.scheduled_at,\n  c.full_name as contact_name,\n  c.whatsapp,\n  c.opt_out,\n  ls.authority_score,\n  ls.need_score,\n  ls.urgency_score,\n  ls.money_score,\n  COALESCE(ls.total_score, 0) as anum_score,\n  COALESCE(ls.qualification_stage, 'pre') as qualification_stage,\n  COALESCE(ls.is_qualified, false) as is_qualified,\n  COALESCE(ls.status, 'active') as lead_status,\n  comp.evolution_api_url,\n  comp.evolution_instance,\n  comp.evolution_api_key,\n  camp.should_continue,\n  camp.status as campaign_status,\n  fc.qualification_threshold,\n  fc.disqualification_threshold\nFROM corev4_followup_executions fe\nJOIN corev4_contacts c ON fe.contact_id = c.id\nJOIN corev4_companies comp ON fe.company_id = comp.id\nJOIN corev4_followup_campaigns camp ON fe.campaign_id = camp.id\nLEFT JOIN corev4_followup_configs fc ON camp.config_id = fc.id\nLEFT JOIN corev4_lead_state ls ON fe.contact_id = ls.contact_id\nWHERE fe.executed = false\n  AND fe.scheduled_at <= NOW()\n  AND c.opt_out = false\n  AND camp.should_continue = true\n  AND fe.step <= fe.total_steps\nORDER BY fe.scheduled_at ASC\nLIMIT 50;",
        "options": {}
      },
      "id": "829220ad-376a-4fdf-a6ef-b73759a3fd20",
      "name": "Fetch: Peding Followups",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1728,
        336
      ],
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2ddbb124-6554-409d-84b2-9a0effde3b4b",
      "name": " Loop: Over Followups",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1504,
        336
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "qualified",
              "leftValue": "={{ $json.anum_score }}",
              "rightValue": "={{ $json.qualification_threshold }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "5dec202c-fa76-47c2-9ac2-18790c636f79",
      "name": "Check: Is Qualified?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1280,
        -112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "disqualified",
              "leftValue": "={{ $json.anum_score }}",
              "rightValue": "={{ $json.disqualification_threshold }}",
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "1cd9e9bf-7e42-4cf4-87f7-b92bdb144ede",
      "name": "Check: Is Disqualified?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1056,
        -16
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Buscar histórico de chat\nSELECT role, message, message_timestamp\nFROM corev4_chat_history\nWHERE contact_id = {{ $(' Loop: Over Followups').item.json.contact_id }}\nORDER BY message_timestamp DESC\nLIMIT 10;",
        "options": {}
      },
      "id": "336103c9-d946-49b9-a918-666d02af49b6",
      "name": "Fetch: Chat History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -832,
        80
      ],
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Buscar followups anteriores desta campanha\nSELECT step, generated_message, sent_at\nFROM corev4_followup_executions\nWHERE campaign_id = {{ $(' Loop: Over Followups').item.json.campaign_id }}\n  AND executed = true\nORDER BY step ASC;",
        "options": {}
      },
      "id": "c0ca49dc-de18-4853-8ba6-af11b7511a8d",
      "name": "Fetch: Previous Followups",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -608,
        80
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Preparar contexto para IA baseado no STEP atual\nconst lead = $(' Loop: Over Followups').item.json;\nconst chatHistory = $('Fetch: Chat History').all();\nconst previousFollowups = $('Fetch: Previous Followups').all();\n\nconst step = lead.step;\nconst totalSteps = lead.total_steps;\n\n// Formatar histórico de chat - COM VALIDAÇÃO\nconst recentMessages = chatHistory\n  .filter(m => m.message && m.message.trim() !== '')\n  .slice(0, 5)\n  .map(m => `[${m.role}]: ${m.message.substring(0, 100)}`)\n  .join('\\n') || 'Sem histórico de chat';\n\n// Formatar followups anteriores\nconst followupHistory = previousFollowups.map(f => \n  `Step ${f.step}: ${f.generated_message}`\n).join('\\n') || 'Nenhum followup anterior';\n\n// Determinar estratégia baseada no step\nlet stepContext = '';\n\nif (step === 1) {\n  stepContext = `STEP 1 de ${totalSteps}: REENGAJAMENTO SUAVE\n- Primeira tentativa após ~1 hora de inatividade\n- Tom: leve, útil, sem pressão\n- Objetivo: retomar conversa naturalmente`;\n} else if (step === 2) {\n  stepContext = `STEP 2 de ${totalSteps}: AGREGAR VALOR\n- Segunda tentativa após ~1 dia\n- Tom: educativo, consultivo\n- Objetivo: demonstrar expertise e valor`;\n} else if (step === 3) {\n  stepContext = `STEP 3 de ${totalSteps}: URGÊNCIA SUTIL\n- Terceira tentativa após ~3 dias\n- Tom: profissional com senso de oportunidade\n- Objetivo: criar timing adequado sem ser pushy`;\n} else if (step === 4) {\n  stepContext = `STEP 4 de ${totalSteps}: ÚLTIMA CHANCE\n- Quarta tentativa após ~6 dias\n- Tom: respeitoso e direto\n- Objetivo: comunicar closure respeitoso`;\n} else if (step === 5) {\n  stepContext = `STEP 5 de ${totalSteps}: DESPEDIDA\n- Última mensagem após ~13 dias\n- Tom: gracioso, sem ressentimento\n- Objetivo: encerrar com classe e plantar semente`;\n}\n\n// ADICIONAR session_id\nconst sessionId = `${lead.whatsapp}_id_${lead.contact_id}`;\n\nreturn {\n  execution_id: lead.execution_id,\n  campaign_id: lead.campaign_id,\n  contact_id: lead.contact_id,\n  company_id: lead.company_id,\n  contact_name: lead.contact_name || 'Cliente',\n  whatsapp: lead.whatsapp,\n  step: step,\n  total_steps: totalSteps,\n  anum_score: lead.anum_score,\n  qualification_stage: lead.qualification_stage || 'inicial',\n  evolution_api_url: lead.evolution_api_url,\n  evolution_instance: lead.evolution_instance,\n  evolution_api_key: lead.evolution_api_key,\n  \n  // Session ID para memória\n  session_id: sessionId,\n  \n  // Contexto para IA\n  step_context: stepContext,\n  recent_messages: recentMessages,\n  followup_history: followupHistory,\n  lead_responded: chatHistory.some(m => m.role === 'user')\n};"
      },
      "id": "e0cee31f-0b5d-440d-a020-ea246adfbe44",
      "name": "Prepare: Followup Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        80
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Marcar como enviado (SQL Injection Safe)\nUPDATE corev4_followup_executions\nSET \n  executed = true,\n  sent_at = NOW(),\n  generated_message = $1,\n  generation_context = $2,\n  decision_reason = 'sent'\nWHERE id = $3;",
        "options": {
          "queryReplacement": "={{ [$('AI: Generate Message').item.json.output, JSON.stringify($('Prepare: Followup Context').item.json), $('Prepare: Followup Context').item.json.execution_id] }}"
        }
      },
      "id": "d628d902-2fb9-4dd8-9f6b-60780a4163bb",
      "name": "Update: Mark as Sent",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        544,
        80
      ],
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE corev4_followup_campaigns\nSET \n  steps_completed = {{ $('Prepare: Followup Context').item.json.step }},\n  last_step_sent_at = NOW(),\n  should_continue = CASE \n    WHEN {{ $('Prepare: Followup Context').item.json.step }} >= total_steps THEN false\n    ELSE true\n  END,\n  status = CASE\n    WHEN {{ $('Prepare: Followup Context').item.json.step }} >= total_steps THEN 'completed'\n    ELSE 'active'\n  END\nWHERE id = {{ $('Prepare: Followup Context').item.json.campaign_id }};",
        "options": {}
      },
      "id": "5f699034-8687-494c-86ab-c6418ec55ce5",
      "name": "Update: Campaign Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        80
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "options": {}
      },
      "id": "1ad6ec06-9f78-4961-b25a-3357f281a3a6",
      "name": "Merge: Skip Paths",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -608,
        -240
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Marcar execution como skipped\nUPDATE corev4_followup_executions\nSET \n  executed = true,\n  should_send = false,\n  decision_reason = '{{ $json.skip_reason }}'\nWHERE id = {{ $(' Loop: Over Followups').item.json.execution_id }};\n\n-- Parar campanha se necessário\nUPDATE corev4_followup_campaigns\nSET \n  should_continue = false,\n  status = 'completed',\n  stopped_reason = '{{ $json.skip_reason }}'\nWHERE id = {{ $(' Loop: Over Followups').item.json.campaign_id }}\n  AND '{{ $json.stop_campaign }}' = 'true';",
        "options": {}
      },
      "id": "9db973ae-ed66-4bd2-bd9b-316b85f6f96c",
      "name": "Update: Mark as Skipped",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        -240
      ],
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "id": "53723a08-db1c-4887-83c6-28a0f5d92d6e",
      "name": "Merge: Back to Loop",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        992,
        192
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Prepare: Followup Context').item.json.session_id }}",
        "tableName": "corev4_n8n_chat_histories",
        "contextWindowLength": 35
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        112,
        304
      ],
      "id": "967936bd-696d-42aa-ab6b-651983247fd4",
      "name": "Store: Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "HCvX4Ypw2MiRDsdm",
          "name": "Postgres Core"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Prepare: Followup Context').item.json.evolution_api_url }}/message/sendText/{{ $('Prepare: Followup Context').item.json.evolution_instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('Prepare: Followup Context').item.json.evolution_api_key }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Prepare: Followup Context').item.json.whatsapp }}"
            },
            {
              "name": "text",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "3f627241-7af6-4a3e-b5c3-231cd778abbe",
      "name": "Send: WhatsApp Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        80
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini-2025-04-14",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini-2025-04-14"
        },
        "options": {
          "maxTokens": 500,
          "temperature": 0.7
        }
      },
      "id": "5a87a2cb-d8f6-44b7-8977-3982c2f4cd89",
      "name": "Model: OpenAI Chat ",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -160,
        304
      ],
      "credentials": {
        "openAiApi": {
          "id": "txoE7pVX433qEz2A",
          "name": "OpenAI | CORE ONE™ - FRANK | TEXTO"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -32,
        304
      ],
      "id": "063a40ae-87cb-41bd-9ecf-577bf5c0af42",
      "name": "Model: Google Gemini Chat ",
      "credentials": {
        "googlePalmApi": {
          "id": "LzScbb9FM7NYxbHO",
          "name": "Google Core"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Merge Back to Loop1": {
      "main": [
        [
          {
            "node": "Loop Over Followups1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Skip: Qualified": {
      "main": [
        [
          {
            "node": "Merge: Skip Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Skip: Disqualified": {
      "main": [
        [
          {
            "node": "Merge: Skip Paths",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI: Generate Message": {
      "main": [
        [
          {
            "node": "Send: WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger: Every 5 Minutes": {
      "main": [
        [
          {
            "node": "Fetch: Peding Followups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch: Peding Followups": {
      "main": [
        [
          {
            "node": " Loop: Over Followups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Loop: Over Followups": {
      "main": [
        [
          {
            "node": "Merge: Back to Loop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check: Is Qualified?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check: Is Qualified?": {
      "main": [
        [
          {
            "node": "Skip: Qualified",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check: Is Disqualified?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check: Is Disqualified?": {
      "main": [
        [
          {
            "node": "Skip: Disqualified",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch: Chat History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch: Chat History": {
      "main": [
        [
          {
            "node": "Fetch: Previous Followups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch: Previous Followups": {
      "main": [
        [
          {
            "node": "Prepare: Followup Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare: Followup Context": {
      "main": [
        [
          {
            "node": "AI: Generate Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update: Mark as Sent": {
      "main": [
        [
          {
            "node": "Update: Campaign Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update: Campaign Status": {
      "main": [
        [
          {
            "node": "Merge: Back to Loop",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge: Skip Paths": {
      "main": [
        [
          {
            "node": "Update: Mark as Skipped",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update: Mark as Skipped": {
      "main": [
        [
          {
            "node": "Merge: Back to Loop",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge: Back to Loop": {
      "main": [
        [
          {
            "node": " Loop: Over Followups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store: Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI: Generate Message",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Send: WhatsApp Message": {
      "main": [
        [
          {
            "node": "Update: Mark as Sent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model: OpenAI Chat ": {
      "ai_languageModel": [
        [
          {
            "node": "AI: Generate Message",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Model: Google Gemini Chat ": {
      "ai_languageModel": [
        [
          {
            "node": "AI: Generate Message",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0c77ea30-3f04-4ec9-a602-3b5ea55f9b18",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5c6394fedb685d155bbe72063becfd91d616d8e123397941c9863e7b805328ae"
  },
  "id": "2JLewCzOOvJvVI2X",
  "tags": [
    {
      "createdAt": "2025-10-16T11:45:27.519Z",
      "updatedAt": "2025-10-16T11:45:27.519Z",
      "id": "eTCC1MPmHZOu7LAH",
      "name": "corev4"
    }
  ]
}